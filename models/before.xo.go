// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Before represents a row from '[custom before]'.
type Before struct {
	LineCd               int    // line_cd
	LineName             string // line_name
	StationCd            int    // station_cd
	StationName          string // station_name
	Address              string // address
	BeforeStationCd      int    // before_station_cd
	BeforeStationName    string // before_station_name
	BeforeStationGCd     int    // before_station_g_cd
	BeforeStationAddress string // before_station_address
}

// BeforesByStationCD runs a custom query, returning results as Before.
func BeforesByStationCD(db XODB, stationCD int) ([]*Before, error) {
	var err error

	// sql query
	const sqlstr = `select sl.line_cd, ` +
		`sl.line_name, ` +
		`s.station_cd, ` +
		`s.station_name, ` +
		`s.address, ` +
		`COALESCE(js.station_cd, 0)    as before_station_cd, ` +
		`COALESCE(js.station_name, '') as before_station_name, ` +
		`COALESCE(js.station_g_cd, 0)  as before_station_g_cd, ` +
		`COALESCE(js.address, '')      as before_station_address ` +
		`from station s ` +
		`left outer join line sl on s.line_cd = sl.line_cd ` +
		`left outer join station_join j on s.line_cd = j.line_cd and s.station_cd = j.station_cd1 ` +
		`left outer join station js on j.station_cd2 = js.station_cd ` +
		`where s.e_status = 0 ` +
		`and s.station_cd = $1`

	// run query
	XOLog(sqlstr, stationCD)
	q, err := db.Query(sqlstr, stationCD)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Before{}
	for q.Next() {
		b := Before{}

		// scan
		err = q.Scan(&b.LineCd, &b.LineName, &b.StationCd, &b.StationName, &b.Address, &b.BeforeStationCd, &b.BeforeStationName, &b.BeforeStationGCd, &b.BeforeStationAddress)
		if err != nil {
			return nil, err
		}

		res = append(res, &b)
	}

	return res, nil
}
