// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Transfer represents a row from '[custom transfer]'.
type Transfer struct {
	StationCd           int    // station_cd
	LineCd              int    // line_cd
	LineName            string // line_name
	StationName         string // station_name
	StationGCd          int    // station_g_cd
	Address             string // address
	TransferLineCd      int    // transfer_line_cd
	TransferLineName    string // transfer_line_name
	TransferStationCd   int    // transfer_station_cd
	TransferStationName string // transfer_station_name
	TransferAddress     string // transfer_address
}

// TransfersByStationCD runs a custom query, returning results as Transfer.
func TransfersByStationCD(db XODB, stationCD int) ([]*Transfer, error) {
	var err error

	// sql query
	const sqlstr = `select s.station_cd, ` +
		`ls.line_cd, ` +
		`ls.line_name, ` +
		`s.station_name, ` +
		`s.station_g_cd, ` +
		`s.address, ` +
		`COALESCE(lt.line_cd, 0)     as transfer_line_cd, ` +
		`COALESCE(lt.line_name, '')   as transfer_line_name, ` +
		`COALESCE(t.station_cd, 0)   as transfer_station_cd, ` +
		`COALESCE(t.station_name, '') as transfer_station_name, ` +
		`COALESCE(t.address, '')      as transfer_address ` +
		`from station s ` +
		`left outer join station t on s.station_g_cd = t.station_g_cd and s.station_cd <> t.station_cd ` +
		`left outer join line ls on s.line_cd = ls.line_cd ` +
		`left outer join line lt on t.line_cd = lt.line_cd ` +
		`where s.station_cd = $1`

	// run query
	XOLog(sqlstr, stationCD)
	q, err := db.Query(sqlstr, stationCD)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Transfer{}
	for q.Next() {
		t := Transfer{}

		// scan
		err = q.Scan(&t.StationCd, &t.LineCd, &t.LineName, &t.StationName, &t.StationGCd, &t.Address, &t.TransferLineCd, &t.TransferLineName, &t.TransferStationCd, &t.TransferStationName, &t.TransferAddress)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}
